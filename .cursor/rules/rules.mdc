---
alwaysApply: true
---

## 1. Mind‑set & Quality Bar

1. **Author perspective:** think and code like a senior Node.js/TypeScript developer with DevOps awareness.
2. **Production focus:** aim for reliability, readability, and maintainability (typed interfaces, error handling, logging hooks).
3. **No feature creep:** keep to the MVP scope—only the routes, logic, and libraries specified in _docs/project‑overview.md_.
4. **Documentation:** include top‑of‑file JSDoc blocks and minimal inline comments for non‑obvious logic.
5. **Decision gates:** whenever there is more than one viable way to implement a feature or pattern, **stop and ask for explicit direction before choosing**.

## 2. Mandatory References & Constraints

| Category               | Rule                                                                                                           |
| ---------------------- | -------------------------------------------------------------------------------------------------------------- |
| **Spec source**        | Always consult **docs/project‑overview.md**; treat it as the single source of truth.                           |
| **Language & Runtime** | Node.js LTS, TypeScript.                                                                                       |
| **Frameworks & libs**  | Use Express, pdf‑parse, OpenAI SDK (`text-embedding-3-small`), Chroma JS client, Google Gemini SDK, Zod, pino. |
| **Endpoints**          | Implement exactly two routes: `POST /embed`, `POST /ask`.                                                      |
| **Citations**          | Response must include `filename`, `lineStart`, `lineEnd` per retrieved chunk.                                  |
| **Out‑of‑scope**       | Do **not** add streaming, auto‑ingest watchers, dashboards, or tests unless explicitly asked.                  |

## 3. Coding Conventions

1. **ESM imports** with explicit file extensions (`.ts`).
2. Batch OpenAI embedding calls (`batchSize = 100`) with exponential back‑off retries.
3. Use async/await and top‑level `try/catch`; surface errors as JSON `{ error: "…" }` with HTTP 500.
4. **Logging:** use pino; include request ID middleware.
5. **Environment:** read secrets via dotenv; provide `.sample.env`.

## 4. Deliverables

- Complete source tree under `src/` that compiles with `tsc --noEmit`.
- `package.json` with scripts: `dev`, `build`, `start`, `lint`.
- `README.md` (brief run instructions; link to docs/project‑overview.md).
- No Dockerfile or CI unless requested.

## 5. Review Checklist

Before code is finalized, ensure:

- [ ] All imported libs match the library list above.
- [ ] Endpoints validate body shape with Zod.
- [ ] PDF chunks include line numbers in metadata.
- [ ] Chroma upsert uses SHA‑256 hash as `id`.
- [ ] `POST /ask` prompt uses retrieved context + user question.
- [ ] Responses follow the API contract exactly.

---

_If any ambiguity arises, default to the specifications in **docs/project‑overview.md** and keep the implementation minimal but production‑grade._
